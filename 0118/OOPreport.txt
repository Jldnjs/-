1. OOP(Object Oriented Programming)

 OOP란 객체 지향 프로그래밍의 약자로, 현실 세계를 시스템화 하는데 있어서, 가장 많은 선택을 
받은 프로그래밍 기법이다. 추상화, 캡슐화, 모듈화, 계층화를 바탕으로 객체를 유기적으로 연결한
프로그래밍이다. 
 여러가지의 부품들로 만들어지는 하나의 물체와 같은 개념이다. 때문에 유연하게 변경이 가능하고, 
프로그래밍의 유지보수가 유리하다. 독립적인 객체를 지향하기 때문에 코드의 재사용이 용이하다.
 
2. Object(객체)

 객체는 식별성을 띄고, 속성과 행위를 가진 시스템상에서 표현하는 모든 대상을 뜻한다.
 식별성(identity)이란 대상을 구분할 수 있는 상태이고, 여러 개 존재할 수 있다. 상태(state)란 
객체가 가질 수 있는 조건으로 행위에 따라 변한다. 

 객체의 종류로는 물리적인 객체, 개념적인 객체, 소프트웨어적인 객체가 있다. 
 물리적인 객체는 실제로 만질 수 있는 객체이고, 개념적인 객체는 표현을 해야하는 객체이다. 소
 프트웨어적인 객체는 편리하게 다루기 위해 만들어진 객체이다.

3. Class
 
  클래스란 속성, 행위, 관계, 의미가 공통적인 객체의 모임이다. 동일한 속성과 행위를 가지고 
  있는객체의 변수, 메소드의 집합이라고도 표현할 수 있다.  

4. abstaction(추상화)
 
 객체의 공통적인 속성과 기능을 추출하여 정의하는 것이다. 추상화한다는 것은 여러 개체들을 집합
으로 파악한다는 것과 같다. 구체적인 사물들의 공통적인 특징을 파악해서 이를 하나의 개념으로 다
루는 수단이다.
 공통된 속성을 추출하여 정의해놓음으로써 상속을 통해 코드의 재사용성이 증가한다. 

 추상화 클래스를 작성할 때는, 메서드의 선언부만 작성하고, 실제 수행 내용은 구현하지 않은 채로
메서드를 선언한다.
  
5. Generalization(일반화) / Inheritance(상속)

 일반화란 여러 개체들이 가진 공통된 특성을 하나의 개념이으로 성립시키는 과정이며 상속관계를 의
미한다. 상속은 상위 클래스의 모든 속성과 연산을 하위클래스가 물려 받는 것을 뜻한다. 그래서 일
반화는 트리 구조로 표현될 수 있다. 
 예를 들어 "개", "고양이", "사자" 는 '동물'로 일반화 할 수 있다.

 일반화의 장점은 코드 재사용이 가능하고, 간결한 표현을 할 수 있다.

상위 개념/일반화
 
공통적인 특징들을 일반화하여 공유하는 것. 
is a

6. Specialization(구체적)
 
  특수화는 상속을 통해 클래스 간의 관계를 형성하는 것을 뜻한다. 기존 클래스를 확장하여 새 클래
 스를 생성하는 과정이다. 하위 클래스를 상위 클래스의 기능을 확장하거나 수정할 수 있다.

하위개념 / 구체화

is a

7. Realization

 실체화는 속성이나 추상적인 개념의 내용을 실체로 간주하는 일을 뜻한다. 실체화를 통해 인터페이
스 상의 상속을 만들어낼 수 있으며, 추상화를 구체적으로 구현할 수 있다. 

인터페이스같은 추상적인 것을 실제로 구현/실현 하는 것.
is a

8. Association
 
  연관관계는 클래스 들의 관계가 연관이 되어있다는 것을 의미한다. A클래스의 변수로 B 인스턴스를
 정의하는 것이다. 

has a

영속적. field 객체를 멤버 객체로 사용하는 것.

9. dependency
 
  의존성이란 다른 객체를 참조하는 것을 의미한다. 주로 파라미터, 리턴값, 지역변수 등으로 다른
 객체를 참조한다. 다른 객체가 변하면 의존하는 객체에도 영향이 가기 때문에 무결성이 훼손 될 수 
 있어서 의존은 최소화 하는 것이 좋다. 

new 로 필요할 때마다 생성하는 것. 
instance가 생성된 이후 methodcall에의해 필요할 때마다 호출.

10. Polymorphism

 다형성이란 하나의 객체가 여러 가지 형태를 가질 수 있는 것을 의미한다. 한 타입의 참조 변수를
통해 여러 타입의 객체를 참조할 수 있도록 한다. 
 부모 클래스의 타입의 참조 변수로 자손 클래스의 인스턴스를 참조할 수 있도록 하여 상위 클래스
가 동일한 메시지로 하위 클래스들이 서로 다른 동작을 할 수 있도록 한다.

 다형성의 장점은 유지보수성과 재사용성이 높은 것이다. 여러 객체를 하나의 타입으로 관리할 수 
있어서 유지보수가 용이하다고 할 수 있다. 클래스 간의 의존성이 줄어서 결합도가 낮아진다. 
 다형성은 상위 클래스와 하위 클래스는 상속 관계여야 하고, 오버라이딩이 필요하다.
 오버라이딩이란 상위 클래스로부터 상속받은 메서드의 내용만 변경하여 재사용하는 것이다. 메서드
의 선언부는 동일하게 상속받고, 내용만 변경하여 재사용한다.

11.Encapsulation

 캡슐화란 객체의 중요한 정보는 숨기고 사용법만 오픈하는 구현방법이다. 낮은 결합도와 높은 응집도
를 갖게 한다. 결합도란 다른 클래스나 모듈에게 의존적인 정도를 의미하고, 응집도란 요소들의 관련
도를 의미한다. 
